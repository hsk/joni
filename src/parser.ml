type token =
  | PACKAGE of (string)
  | IMPORT of (string)
  | STRING of (string)
  | INT of (int)
  | ID of (string)
  | STATIC
  | PUBLIC
  | PRIVATE
  | PROTECTED
  | FINAL
  | CLASS
  | THIS
  | TRAIT
  | EXTENDS
  | REXTENDS
  | IF
  | ELSE
  | MATCH
  | OR
  | ARROW
  | RETURN
  | COLON
  | COMMA
  | SEMICOLON
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | LBRACK
  | RBRACK
  | HAT
  | SHARP
  | HART
  | ASSIGN
  | CAST
  | EQ
  | NE
  | LT
  | GT
  | LE
  | GE
  | SUB
  | ADD
  | MUL
  | DIV
  | NEW
  | DOT
  | AT
  | EOF

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
open Ast

let addBlock = function
  | (SBlock _ as b) -> b
  | b -> SBlock [b]

# 62 "parser.ml"
let yytransl_const = [|
  262 (* STATIC *);
  263 (* PUBLIC *);
  264 (* PRIVATE *);
  265 (* PROTECTED *);
  266 (* FINAL *);
  267 (* CLASS *);
  268 (* THIS *);
  269 (* TRAIT *);
  270 (* EXTENDS *);
  271 (* REXTENDS *);
  272 (* IF *);
  273 (* ELSE *);
  274 (* MATCH *);
  275 (* OR *);
  276 (* ARROW *);
  277 (* RETURN *);
  278 (* COLON *);
  279 (* COMMA *);
  280 (* SEMICOLON *);
  281 (* LPAREN *);
  282 (* RPAREN *);
  283 (* LBRACE *);
  284 (* RBRACE *);
  285 (* LBRACK *);
  286 (* RBRACK *);
  287 (* HAT *);
  288 (* SHARP *);
  289 (* HART *);
  290 (* ASSIGN *);
  291 (* CAST *);
  292 (* EQ *);
  293 (* NE *);
  294 (* LT *);
  295 (* GT *);
  296 (* LE *);
  297 (* GE *);
  298 (* SUB *);
  299 (* ADD *);
  300 (* MUL *);
  301 (* DIV *);
  302 (* NEW *);
  303 (* DOT *);
  304 (* AT *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  257 (* PACKAGE *);
  258 (* IMPORT *);
  259 (* STRING *);
  260 (* INT *);
  261 (* ID *);
    0|]

let yylhs = "\255\255\
\001\000\003\000\003\000\004\000\004\000\005\000\005\000\005\000\
\005\000\007\000\007\000\006\000\006\000\006\000\006\000\006\000\
\006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
\006\000\006\000\006\000\006\000\006\000\006\000\006\000\008\000\
\008\000\009\000\009\000\010\000\011\000\011\000\012\000\012\000\
\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
\002\000\002\000\002\000\014\000\014\000\014\000\014\000\014\000\
\014\000\015\000\015\000\013\000\013\000\013\000\016\000\016\000\
\016\000\016\000\016\000\016\000\016\000\020\000\020\000\020\000\
\018\000\018\000\018\000\018\000\018\000\018\000\019\000\019\000\
\021\000\021\000\017\000\022\000\022\000\022\000\022\000\000\000"

let yylen = "\002\000\
\001\000\001\000\004\000\001\000\003\000\003\000\001\000\001\000\
\001\000\001\000\003\000\001\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\002\000\002\000\002\000\003\000\003\000\004\000\005\000\001\000\
\003\000\001\000\002\000\004\000\001\000\002\000\001\000\002\000\
\001\000\002\000\003\000\005\000\007\000\003\000\005\000\005\000\
\001\000\002\000\002\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\002\000\002\000\001\000\002\000\001\000\007\000\
\008\000\003\000\005\000\001\000\005\000\001\000\003\000\003\000\
\004\000\005\000\004\000\005\000\007\000\008\000\001\000\002\000\
\005\000\006\000\001\000\003\000\005\000\001\000\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\063\000\000\000\057\000\052\000\056\000\053\000\
\055\000\054\000\088\000\001\000\000\000\000\000\000\000\061\000\
\068\000\000\000\000\000\000\000\000\000\000\000\000\000\062\000\
\050\000\059\000\060\000\000\000\000\000\071\000\072\000\000\000\
\000\000\000\000\000\000\000\000\000\000\083\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\075\000\000\000\073\000\000\000\000\000\069\000\080\000\
\000\000\000\000\008\000\007\000\000\000\000\000\000\000\000\000\
\000\000\012\000\000\000\000\000\000\000\087\000\000\000\000\000\
\074\000\000\000\000\000\003\000\000\000\000\000\026\000\025\000\
\027\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\029\000\000\000\000\000\006\000\
\000\000\028\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\024\000\085\000\000\000\000\000\
\000\000\000\000\000\000\064\000\000\000\077\000\000\000\081\000\
\000\000\000\000\000\000\030\000\000\000\000\000\000\000\042\000\
\000\000\000\000\000\000\065\000\078\000\082\000\011\000\031\000\
\000\000\000\000\000\000\043\000\038\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\048\000\035\000\
\000\000\000\000\045\000\036\000"

let yydgoto = "\002\000\
\011\000\012\000\036\000\000\000\066\000\123\000\103\000\000\000\
\154\000\155\000\137\000\138\000\013\000\014\000\015\000\016\000\
\037\000\017\000\042\000\018\000\043\000\038\000"

let yysindex = "\019\000\
\173\255\000\000\000\000\138\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\124\255\250\254\014\255\000\000\
\000\000\247\254\020\255\016\255\036\255\041\255\008\255\000\000\
\000\000\000\000\000\000\239\254\062\255\000\000\000\000\055\255\
\051\255\241\254\069\255\081\255\080\255\000\000\012\255\137\255\
\074\255\084\255\062\255\103\255\116\255\103\255\108\255\110\255\
\105\255\000\000\102\255\000\000\104\255\013\255\000\000\000\000\
\055\255\106\255\000\000\000\000\114\255\116\255\116\255\116\255\
\116\255\000\000\154\003\107\255\099\255\000\000\135\255\117\255\
\000\000\128\255\120\255\000\000\076\255\120\003\000\000\000\000\
\000\000\116\255\103\255\116\255\116\255\116\255\116\255\116\255\
\116\255\116\255\116\255\116\255\116\255\116\255\110\255\089\255\
\125\255\144\255\156\255\149\255\000\000\206\255\019\255\000\000\
\154\003\000\000\152\255\152\255\031\255\031\255\031\255\031\255\
\025\255\025\255\126\255\126\255\000\000\000\000\073\255\157\255\
\116\255\061\255\183\255\000\000\089\255\000\000\153\255\000\000\
\179\255\116\255\159\255\000\000\193\255\116\255\154\003\000\000\
\160\255\089\255\175\255\000\000\000\000\000\000\000\000\000\000\
\055\255\169\255\140\003\000\000\000\000\181\255\116\255\089\255\
\202\255\180\255\181\255\154\003\192\255\190\255\000\000\000\000\
\089\255\089\255\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\200\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\023\000\039\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\065\003\
\000\000\100\255\000\000\186\255\000\000\000\000\000\000\000\000\
\000\000\000\000\185\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\001\000\000\000\000\000\000\000\049\000\000\000\000\000\000\000\
\000\000\000\000\119\003\188\255\000\000\000\000\000\000\099\003\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\205\255\000\000\000\000\
\084\002\000\000\008\002\045\002\078\001\126\001\172\001\218\001\
\189\000\235\000\097\000\143\000\000\000\000\000\030\001\000\000\
\052\003\000\000\201\002\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\238\002\000\000\
\000\000\240\254\000\000\000\000\000\000\000\000\000\000\000\000\
\121\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\204\255\015\003\155\002\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\248\255\234\255\000\000\000\000\222\255\103\000\000\000\
\079\000\000\000\127\255\166\255\000\000\000\000\222\000\223\000\
\029\000\000\000\194\000\000\000\000\000\224\255"

let yytablesize = 1225
let yytable = "\033\000\
\002\000\028\000\037\000\005\000\025\000\124\000\046\000\039\000\
\149\000\040\000\067\000\037\000\034\000\044\000\003\000\070\000\
\034\000\034\000\004\000\001\000\030\000\058\000\049\000\068\000\
\006\000\007\000\008\000\078\000\079\000\080\000\081\000\053\000\
\164\000\035\000\140\000\009\000\010\000\050\000\074\000\058\000\
\031\000\131\000\102\000\058\000\132\000\032\000\029\000\105\000\
\009\000\107\000\108\000\109\000\110\000\111\000\112\000\113\000\
\114\000\115\000\116\000\117\000\106\000\157\000\118\000\059\000\
\060\000\119\000\041\000\051\000\092\000\093\000\163\000\094\000\
\090\000\091\000\092\000\093\000\120\000\094\000\059\000\060\000\
\061\000\121\000\075\000\044\000\045\000\062\000\135\000\122\000\
\136\000\127\000\047\000\059\000\060\000\119\000\133\000\102\000\
\022\000\077\000\054\000\147\000\062\000\101\000\063\000\048\000\
\120\000\049\000\064\000\057\000\065\000\121\000\146\000\055\000\
\069\000\062\000\034\000\122\000\156\000\063\000\059\000\060\000\
\061\000\064\000\002\000\065\000\003\000\002\000\071\000\072\000\
\004\000\095\000\063\000\073\000\096\000\005\000\064\000\076\000\
\065\000\003\000\077\000\097\000\062\000\004\000\023\000\098\000\
\003\000\100\000\005\000\024\000\004\000\099\000\019\000\020\000\
\021\000\005\000\006\000\007\000\008\000\063\000\125\000\022\000\
\128\000\064\000\023\000\065\000\052\000\009\000\010\000\006\000\
\007\000\008\000\129\000\126\000\094\000\003\000\006\000\007\000\
\008\000\004\000\009\000\010\000\141\000\134\000\005\000\142\000\
\144\000\009\000\010\000\148\000\021\000\086\000\087\000\088\000\
\089\000\090\000\091\000\092\000\093\000\145\000\094\000\153\000\
\139\000\150\000\151\000\006\000\007\000\008\000\158\000\159\000\
\161\000\162\000\070\000\086\000\079\000\084\000\009\000\010\000\
\082\000\083\000\084\000\085\000\086\000\087\000\088\000\089\000\
\090\000\091\000\092\000\093\000\130\000\094\000\010\000\034\000\
\143\000\160\000\020\000\026\000\056\000\027\000\000\000\082\000\
\083\000\084\000\085\000\086\000\087\000\088\000\089\000\090\000\
\091\000\092\000\093\000\000\000\094\000\000\000\000\000\000\000\
\000\000\002\000\000\000\002\000\002\000\002\000\000\000\000\000\
\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\
\002\000\002\000\002\000\002\000\000\000\002\000\000\000\002\000\
\002\000\002\000\002\000\002\000\002\000\009\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\009\000\049\000\009\000\009\000\009\000\000\000\000\000\
\000\000\000\000\009\000\000\000\000\000\000\000\000\000\000\000\
\009\000\009\000\009\000\009\000\000\000\009\000\000\000\009\000\
\009\000\000\000\009\000\009\000\009\000\016\000\000\000\009\000\
\009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
\009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
\009\000\022\000\000\000\022\000\022\000\022\000\000\000\000\000\
\000\000\000\000\022\000\000\000\000\000\000\000\000\000\000\000\
\022\000\022\000\022\000\022\000\000\000\022\000\000\000\022\000\
\022\000\022\000\022\000\022\000\022\000\017\000\000\000\022\000\
\022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
\022\000\022\000\022\000\022\000\022\000\022\000\022\000\023\000\
\022\000\023\000\023\000\023\000\000\000\000\000\000\000\000\000\
\023\000\000\000\000\000\000\000\000\000\000\000\023\000\023\000\
\023\000\023\000\000\000\023\000\000\000\023\000\023\000\023\000\
\023\000\023\000\023\000\018\000\000\000\023\000\023\000\023\000\
\023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
\023\000\023\000\023\000\023\000\023\000\021\000\023\000\021\000\
\021\000\021\000\000\000\000\000\000\000\000\000\021\000\000\000\
\000\000\000\000\000\000\000\000\021\000\021\000\021\000\021\000\
\000\000\021\000\000\000\021\000\021\000\021\000\021\000\021\000\
\021\000\019\000\000\000\021\000\021\000\021\000\021\000\021\000\
\021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
\000\000\000\000\021\000\020\000\021\000\020\000\020\000\020\000\
\000\000\000\000\000\000\000\000\020\000\000\000\000\000\000\000\
\000\000\000\000\020\000\020\000\020\000\020\000\000\000\020\000\
\000\000\020\000\020\000\020\000\020\000\020\000\020\000\014\000\
\000\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
\020\000\020\000\020\000\020\000\020\000\020\000\000\000\000\000\
\020\000\000\000\020\000\000\000\000\000\000\000\009\000\000\000\
\009\000\009\000\009\000\000\000\000\000\000\000\000\000\009\000\
\000\000\000\000\000\000\000\000\015\000\009\000\009\000\009\000\
\009\000\000\000\009\000\000\000\000\000\009\000\000\000\000\000\
\009\000\009\000\000\000\000\000\009\000\009\000\009\000\009\000\
\009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
\009\000\009\000\009\000\009\000\009\000\009\000\016\000\000\000\
\016\000\016\000\016\000\013\000\000\000\000\000\000\000\016\000\
\000\000\000\000\000\000\000\000\000\000\016\000\016\000\016\000\
\016\000\000\000\016\000\000\000\016\000\016\000\016\000\016\000\
\016\000\016\000\000\000\000\000\016\000\016\000\016\000\016\000\
\016\000\016\000\016\000\016\000\016\000\016\000\016\000\000\000\
\046\000\000\000\000\000\016\000\000\000\016\000\017\000\000\000\
\017\000\017\000\017\000\000\000\000\000\000\000\000\000\017\000\
\000\000\000\000\000\000\000\000\000\000\017\000\017\000\017\000\
\017\000\000\000\017\000\000\000\017\000\017\000\017\000\017\000\
\017\000\017\000\044\000\000\000\017\000\017\000\017\000\017\000\
\017\000\017\000\017\000\017\000\017\000\017\000\017\000\000\000\
\000\000\000\000\000\000\017\000\018\000\017\000\018\000\018\000\
\018\000\000\000\000\000\000\000\000\000\018\000\000\000\000\000\
\000\000\000\000\000\000\018\000\018\000\018\000\018\000\000\000\
\018\000\000\000\018\000\018\000\018\000\018\000\018\000\018\000\
\039\000\000\000\018\000\018\000\018\000\018\000\018\000\018\000\
\018\000\018\000\018\000\018\000\018\000\000\000\000\000\000\000\
\000\000\018\000\019\000\018\000\019\000\019\000\019\000\000\000\
\000\000\000\000\000\000\019\000\000\000\000\000\000\000\000\000\
\000\000\019\000\019\000\019\000\019\000\040\000\019\000\000\000\
\019\000\019\000\019\000\019\000\019\000\019\000\000\000\000\000\
\019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
\019\000\019\000\019\000\000\000\000\000\000\000\000\000\019\000\
\014\000\019\000\014\000\014\000\014\000\000\000\047\000\000\000\
\000\000\014\000\000\000\000\000\000\000\000\000\000\000\014\000\
\014\000\014\000\014\000\000\000\014\000\000\000\014\000\014\000\
\014\000\014\000\014\000\014\000\000\000\000\000\014\000\014\000\
\014\000\014\000\014\000\014\000\014\000\015\000\000\000\015\000\
\015\000\015\000\000\000\041\000\000\000\014\000\015\000\014\000\
\000\000\000\000\000\000\000\000\015\000\015\000\015\000\015\000\
\066\000\015\000\000\000\015\000\015\000\015\000\015\000\015\000\
\015\000\000\000\000\000\015\000\015\000\015\000\015\000\015\000\
\015\000\015\000\000\000\000\000\013\000\000\000\013\000\013\000\
\013\000\000\000\015\000\000\000\015\000\013\000\000\000\000\000\
\000\000\000\000\076\000\013\000\013\000\013\000\013\000\000\000\
\013\000\000\000\013\000\013\000\013\000\013\000\013\000\013\000\
\000\000\000\000\013\000\013\000\013\000\000\000\067\000\000\000\
\000\000\046\000\000\000\046\000\046\000\046\000\000\000\000\000\
\000\000\013\000\046\000\013\000\000\000\000\000\000\000\000\000\
\046\000\046\000\000\000\046\000\000\000\046\000\000\000\000\000\
\046\000\046\000\000\000\046\000\046\000\000\000\000\000\046\000\
\046\000\046\000\002\000\044\000\000\000\044\000\044\000\044\000\
\000\000\000\000\046\000\046\000\044\000\000\000\046\000\000\000\
\046\000\000\000\044\000\000\000\000\000\044\000\000\000\044\000\
\000\000\000\000\044\000\044\000\000\000\044\000\044\000\000\000\
\000\000\044\000\044\000\044\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\044\000\044\000\000\000\000\000\
\044\000\039\000\044\000\039\000\039\000\039\000\000\000\000\000\
\000\000\000\000\039\000\000\000\000\000\000\000\000\000\000\000\
\039\000\039\000\000\000\039\000\000\000\039\000\000\000\000\000\
\039\000\039\000\000\000\039\000\039\000\000\000\000\000\039\000\
\039\000\039\000\000\000\000\000\000\000\000\000\040\000\000\000\
\040\000\040\000\040\000\000\000\000\000\000\000\039\000\040\000\
\039\000\000\000\000\000\000\000\000\000\040\000\040\000\000\000\
\040\000\000\000\040\000\000\000\000\000\040\000\040\000\000\000\
\040\000\040\000\000\000\000\000\040\000\040\000\040\000\047\000\
\000\000\047\000\047\000\047\000\000\000\000\000\000\000\000\000\
\047\000\000\000\000\000\040\000\000\000\040\000\047\000\047\000\
\000\000\047\000\000\000\047\000\000\000\000\000\047\000\047\000\
\000\000\047\000\047\000\000\000\000\000\047\000\047\000\047\000\
\000\000\000\000\000\000\000\000\041\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\047\000\041\000\047\000\000\000\
\000\000\066\000\000\000\041\000\041\000\066\000\041\000\000\000\
\041\000\000\000\066\000\041\000\000\000\000\000\041\000\041\000\
\000\000\000\000\041\000\041\000\041\000\000\000\000\000\000\000\
\066\000\000\000\000\000\000\000\066\000\000\000\041\000\066\000\
\066\000\066\000\002\000\076\000\000\000\000\000\000\000\076\000\
\000\000\000\000\066\000\066\000\076\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\067\000\
\000\000\000\000\076\000\067\000\000\000\000\000\076\000\000\000\
\067\000\076\000\076\000\076\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\076\000\076\000\067\000\000\000\
\000\000\104\000\067\000\000\000\000\000\067\000\067\000\067\000\
\000\000\082\000\083\000\084\000\085\000\086\000\087\000\088\000\
\089\000\090\000\091\000\092\000\093\000\152\000\094\000\000\000\
\000\000\000\000\000\000\000\000\000\000\082\000\083\000\084\000\
\085\000\086\000\087\000\088\000\089\000\090\000\091\000\092\000\
\093\000\000\000\094\000\082\000\083\000\084\000\085\000\086\000\
\087\000\088\000\089\000\090\000\091\000\092\000\093\000\000\000\
\094\000"

let yycheck = "\022\000\
\000\000\011\001\019\001\010\001\013\000\096\000\022\001\025\001\
\138\000\027\001\045\000\028\001\005\001\029\001\001\001\048\000\
\005\001\005\001\005\001\001\000\005\001\044\000\000\000\046\000\
\031\001\032\001\033\001\062\000\063\000\064\000\065\000\040\000\
\162\000\026\001\125\000\042\001\043\001\026\001\026\001\001\001\
\005\001\023\001\077\000\005\001\026\001\005\001\027\001\082\000\
\000\000\084\000\085\000\086\000\087\000\088\000\089\000\090\000\
\091\000\092\000\093\000\094\000\083\000\152\000\095\000\003\001\
\004\001\005\001\005\001\039\000\044\001\045\001\161\000\047\001\
\042\001\043\001\044\001\045\001\016\001\047\001\003\001\004\001\
\005\001\021\001\054\000\029\001\034\001\025\001\121\000\027\001\
\028\001\098\000\022\001\003\001\004\001\005\001\022\001\130\000\
\000\000\025\001\025\001\134\000\025\001\026\001\042\001\023\001\
\016\001\026\001\046\001\005\001\048\001\021\001\133\000\028\001\
\005\001\025\001\005\001\027\001\151\000\042\001\003\001\004\001\
\005\001\046\001\023\001\048\001\001\001\026\001\022\001\026\001\
\005\001\023\001\042\001\028\001\034\001\010\001\046\001\030\001\
\048\001\001\001\025\001\005\001\025\001\005\001\000\000\027\001\
\001\001\026\001\010\001\024\001\005\001\022\001\013\001\014\001\
\015\001\010\001\031\001\032\001\033\001\042\001\034\001\022\001\
\005\001\046\001\025\001\048\001\028\001\042\001\043\001\031\001\
\032\001\033\001\022\001\028\001\047\001\001\001\031\001\032\001\
\033\001\005\001\042\001\043\001\028\001\025\001\010\001\005\001\
\026\001\042\001\043\001\028\001\000\000\038\001\039\001\040\001\
\041\001\042\001\043\001\044\001\045\001\005\001\047\001\019\001\
\018\001\027\001\034\001\031\001\032\001\033\001\005\001\028\001\
\017\001\020\001\011\001\026\001\028\001\026\001\042\001\043\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\044\001\045\001\023\001\047\001\026\001\028\001\
\130\000\155\000\000\000\014\000\043\000\015\000\255\255\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\042\001\
\043\001\044\001\045\001\255\255\047\001\255\255\255\255\255\255\
\255\255\001\001\255\255\003\001\004\001\005\001\255\255\255\255\
\255\255\255\255\010\001\255\255\255\255\255\255\255\255\255\255\
\016\001\017\001\018\001\019\001\255\255\021\001\255\255\023\001\
\024\001\025\001\026\001\027\001\028\001\000\000\030\001\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\043\001\044\001\045\001\046\001\047\001\
\048\001\001\001\028\001\003\001\004\001\005\001\255\255\255\255\
\255\255\255\255\010\001\255\255\255\255\255\255\255\255\255\255\
\016\001\017\001\018\001\019\001\255\255\021\001\255\255\023\001\
\024\001\255\255\026\001\027\001\028\001\000\000\255\255\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\043\001\044\001\045\001\046\001\047\001\
\048\001\001\001\255\255\003\001\004\001\005\001\255\255\255\255\
\255\255\255\255\010\001\255\255\255\255\255\255\255\255\255\255\
\016\001\017\001\018\001\019\001\255\255\021\001\255\255\023\001\
\024\001\025\001\026\001\027\001\028\001\000\000\255\255\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\043\001\044\001\045\001\046\001\001\001\
\048\001\003\001\004\001\005\001\255\255\255\255\255\255\255\255\
\010\001\255\255\255\255\255\255\255\255\255\255\016\001\017\001\
\018\001\019\001\255\255\021\001\255\255\023\001\024\001\025\001\
\026\001\027\001\028\001\000\000\255\255\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\001\001\048\001\003\001\
\004\001\005\001\255\255\255\255\255\255\255\255\010\001\255\255\
\255\255\255\255\255\255\255\255\016\001\017\001\018\001\019\001\
\255\255\021\001\255\255\023\001\024\001\025\001\026\001\027\001\
\028\001\000\000\255\255\031\001\032\001\033\001\034\001\035\001\
\036\001\037\001\038\001\039\001\040\001\041\001\042\001\043\001\
\255\255\255\255\046\001\001\001\048\001\003\001\004\001\005\001\
\255\255\255\255\255\255\255\255\010\001\255\255\255\255\255\255\
\255\255\255\255\016\001\017\001\018\001\019\001\255\255\021\001\
\255\255\023\001\024\001\025\001\026\001\027\001\028\001\000\000\
\255\255\031\001\032\001\033\001\034\001\035\001\036\001\037\001\
\038\001\039\001\040\001\041\001\042\001\043\001\255\255\255\255\
\046\001\255\255\048\001\255\255\255\255\255\255\001\001\255\255\
\003\001\004\001\005\001\255\255\255\255\255\255\255\255\010\001\
\255\255\255\255\255\255\255\255\000\000\016\001\017\001\018\001\
\019\001\255\255\021\001\255\255\255\255\024\001\255\255\255\255\
\027\001\028\001\255\255\255\255\031\001\032\001\033\001\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\042\001\
\043\001\044\001\045\001\046\001\047\001\048\001\001\001\255\255\
\003\001\004\001\005\001\000\000\255\255\255\255\255\255\010\001\
\255\255\255\255\255\255\255\255\255\255\016\001\017\001\018\001\
\019\001\255\255\021\001\255\255\023\001\024\001\025\001\026\001\
\027\001\028\001\255\255\255\255\031\001\032\001\033\001\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\255\255\
\000\000\255\255\255\255\046\001\255\255\048\001\001\001\255\255\
\003\001\004\001\005\001\255\255\255\255\255\255\255\255\010\001\
\255\255\255\255\255\255\255\255\255\255\016\001\017\001\018\001\
\019\001\255\255\021\001\255\255\023\001\024\001\025\001\026\001\
\027\001\028\001\000\000\255\255\031\001\032\001\033\001\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\255\255\
\255\255\255\255\255\255\046\001\001\001\048\001\003\001\004\001\
\005\001\255\255\255\255\255\255\255\255\010\001\255\255\255\255\
\255\255\255\255\255\255\016\001\017\001\018\001\019\001\255\255\
\021\001\255\255\023\001\024\001\025\001\026\001\027\001\028\001\
\000\000\255\255\031\001\032\001\033\001\034\001\035\001\036\001\
\037\001\038\001\039\001\040\001\041\001\255\255\255\255\255\255\
\255\255\046\001\001\001\048\001\003\001\004\001\005\001\255\255\
\255\255\255\255\255\255\010\001\255\255\255\255\255\255\255\255\
\255\255\016\001\017\001\018\001\019\001\000\000\021\001\255\255\
\023\001\024\001\025\001\026\001\027\001\028\001\255\255\255\255\
\031\001\032\001\033\001\034\001\035\001\036\001\037\001\038\001\
\039\001\040\001\041\001\255\255\255\255\255\255\255\255\046\001\
\001\001\048\001\003\001\004\001\005\001\255\255\000\000\255\255\
\255\255\010\001\255\255\255\255\255\255\255\255\255\255\016\001\
\017\001\018\001\019\001\255\255\021\001\255\255\023\001\024\001\
\025\001\026\001\027\001\028\001\255\255\255\255\031\001\032\001\
\033\001\034\001\035\001\036\001\037\001\001\001\255\255\003\001\
\004\001\005\001\255\255\000\000\255\255\046\001\010\001\048\001\
\255\255\255\255\255\255\255\255\016\001\017\001\018\001\019\001\
\000\000\021\001\255\255\023\001\024\001\025\001\026\001\027\001\
\028\001\255\255\255\255\031\001\032\001\033\001\034\001\035\001\
\036\001\037\001\255\255\255\255\001\001\255\255\003\001\004\001\
\005\001\255\255\046\001\255\255\048\001\010\001\255\255\255\255\
\255\255\255\255\000\000\016\001\017\001\018\001\019\001\255\255\
\021\001\255\255\023\001\024\001\025\001\026\001\027\001\028\001\
\255\255\255\255\031\001\032\001\033\001\255\255\000\000\255\255\
\255\255\001\001\255\255\003\001\004\001\005\001\255\255\255\255\
\255\255\046\001\010\001\048\001\255\255\255\255\255\255\255\255\
\016\001\017\001\255\255\019\001\255\255\021\001\255\255\255\255\
\024\001\025\001\255\255\027\001\028\001\255\255\255\255\031\001\
\032\001\033\001\034\001\001\001\255\255\003\001\004\001\005\001\
\255\255\255\255\042\001\043\001\010\001\255\255\046\001\255\255\
\048\001\255\255\016\001\255\255\255\255\019\001\255\255\021\001\
\255\255\255\255\024\001\025\001\255\255\027\001\028\001\255\255\
\255\255\031\001\032\001\033\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\042\001\043\001\255\255\255\255\
\046\001\001\001\048\001\003\001\004\001\005\001\255\255\255\255\
\255\255\255\255\010\001\255\255\255\255\255\255\255\255\255\255\
\016\001\017\001\255\255\019\001\255\255\021\001\255\255\255\255\
\024\001\025\001\255\255\027\001\028\001\255\255\255\255\031\001\
\032\001\033\001\255\255\255\255\255\255\255\255\001\001\255\255\
\003\001\004\001\005\001\255\255\255\255\255\255\046\001\010\001\
\048\001\255\255\255\255\255\255\255\255\016\001\017\001\255\255\
\019\001\255\255\021\001\255\255\255\255\024\001\025\001\255\255\
\027\001\028\001\255\255\255\255\031\001\032\001\033\001\001\001\
\255\255\003\001\004\001\005\001\255\255\255\255\255\255\255\255\
\010\001\255\255\255\255\046\001\255\255\048\001\016\001\017\001\
\255\255\019\001\255\255\021\001\255\255\255\255\024\001\025\001\
\255\255\027\001\028\001\255\255\255\255\031\001\032\001\033\001\
\255\255\255\255\255\255\255\255\001\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\046\001\010\001\048\001\255\255\
\255\255\001\001\255\255\016\001\017\001\005\001\019\001\255\255\
\021\001\255\255\010\001\024\001\255\255\255\255\027\001\028\001\
\255\255\255\255\031\001\032\001\033\001\255\255\255\255\255\255\
\024\001\255\255\255\255\255\255\028\001\255\255\043\001\031\001\
\032\001\033\001\034\001\001\001\255\255\255\255\255\255\005\001\
\255\255\255\255\042\001\043\001\010\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\001\001\
\255\255\255\255\024\001\005\001\255\255\255\255\028\001\255\255\
\010\001\031\001\032\001\033\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\042\001\043\001\024\001\255\255\
\255\255\026\001\028\001\255\255\255\255\031\001\032\001\033\001\
\255\255\034\001\035\001\036\001\037\001\038\001\039\001\040\001\
\041\001\042\001\043\001\044\001\045\001\026\001\047\001\255\255\
\255\255\255\255\255\255\255\255\255\255\034\001\035\001\036\001\
\037\001\038\001\039\001\040\001\041\001\042\001\043\001\044\001\
\045\001\255\255\047\001\034\001\035\001\036\001\037\001\038\001\
\039\001\040\001\041\001\042\001\043\001\044\001\045\001\255\255\
\047\001"

let yynames_const = "\
  STATIC\000\
  PUBLIC\000\
  PRIVATE\000\
  PROTECTED\000\
  FINAL\000\
  CLASS\000\
  THIS\000\
  TRAIT\000\
  EXTENDS\000\
  REXTENDS\000\
  IF\000\
  ELSE\000\
  MATCH\000\
  OR\000\
  ARROW\000\
  RETURN\000\
  COLON\000\
  COMMA\000\
  SEMICOLON\000\
  LPAREN\000\
  RPAREN\000\
  LBRACE\000\
  RBRACE\000\
  LBRACK\000\
  RBRACK\000\
  HAT\000\
  SHARP\000\
  HART\000\
  ASSIGN\000\
  CAST\000\
  EQ\000\
  NE\000\
  LT\000\
  GT\000\
  LE\000\
  GE\000\
  SUB\000\
  ADD\000\
  MUL\000\
  DIV\000\
  NEW\000\
  DOT\000\
  AT\000\
  EOF\000\
  "

let yynames_block = "\
  PACKAGE\000\
  IMPORT\000\
  STRING\000\
  INT\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'defs) in
    Obj.repr(
# 56 "parser.mly"
         ( Prog(_1) )
# 598 "parser.ml"
               : Ast.prog))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 59 "parser.mly"
       ( Ty _1 )
# 605 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    Obj.repr(
# 60 "parser.mly"
                                       ( TGen(_1, _3) )
# 613 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 63 "parser.mly"
        ( [_1] )
# 620 "parser.ml"
               : 'typs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typs) in
    Obj.repr(
# 64 "parser.mly"
                   ( _1 :: _3 )
# 628 "parser.ml"
               : 'typs))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 67 "parser.mly"
                      ( _2 )
# 635 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 68 "parser.mly"
        ( EInt(_1) )
# 642 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 69 "parser.mly"
           ( EString(_1) )
# 649 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 70 "parser.mly"
       ( EVar(_1) )
# 656 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 73 "parser.mly"
        ( [_1] )
# 663 "parser.ml"
               : 'exps))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exps) in
    Obj.repr(
# 74 "parser.mly"
                   ( _1 :: _3 )
# 671 "parser.ml"
               : 'exps))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 77 "parser.mly"
               ( _1 )
# 678 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 78 "parser.mly"
                   ( EBin(_1, "=", _3) )
# 686 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 80 "parser.mly"
               ( EBin(_1, "==", _3) )
# 694 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 81 "parser.mly"
               ( EBin(_1, "!=", _3) )
# 702 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 83 "parser.mly"
               ( EBin(_1, "<", _3) )
# 710 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 84 "parser.mly"
               ( EBin(_1, ">", _3) )
# 718 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 85 "parser.mly"
               ( EBin(_1, "<=", _3) )
# 726 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 86 "parser.mly"
               ( EBin(_1, ">=", _3) )
# 734 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 88 "parser.mly"
                ( EBin(_1, "+", _3) )
# 742 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 89 "parser.mly"
                ( EBin(_1, "-", _3) )
# 750 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 91 "parser.mly"
                ( EBin(_1, "*", _3) )
# 758 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 92 "parser.mly"
                ( EBin(_1, "/", _3) )
# 766 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 94 "parser.mly"
                ( EBin(_1, ".", _3) )
# 774 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 96 "parser.mly"
            ( EPre("new", _2) )
# 781 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 97 "parser.mly"
                      ( EPre("-", _2))
# 788 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 99 "parser.mly"
           ( EBin(EVar("this"), ".", _2) )
# 795 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 100 "parser.mly"
                 ( ECast(_3, _1) )
# 803 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    Obj.repr(
# 101 "parser.mly"
                     ( ECall(EVar(_1), []) )
# 810 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'exps) in
    Obj.repr(
# 102 "parser.mly"
                          ( ECall(EVar(_1), _3) )
# 818 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'exps) in
    Obj.repr(
# 103 "parser.mly"
                                ( ECall(EVar(_1), _3) )
# 826 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 106 "parser.mly"
       ( [_1] )
# 833 "parser.ml"
               : 'ids))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'ids) in
    Obj.repr(
# 107 "parser.mly"
                 ( _1::_3 )
# 841 "parser.ml"
               : 'ids))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'case) in
    Obj.repr(
# 110 "parser.mly"
         ( [_1] )
# 848 "parser.ml"
               : 'cases))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'case) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'cases) in
    Obj.repr(
# 111 "parser.mly"
               ( _1::_2 )
# 856 "parser.ml"
               : 'cases))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'stmts) in
    Obj.repr(
# 113 "parser.mly"
                      ( (_2, _4) )
# 864 "parser.ml"
               : 'case))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 116 "parser.mly"
         ( [_1] )
# 871 "parser.ml"
               : 'stmts))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmts) in
    Obj.repr(
# 117 "parser.mly"
               ( _1 :: _2 )
# 879 "parser.ml"
               : 'stmts))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 120 "parser.mly"
        ( SExp(_1) )
# 886 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 121 "parser.mly"
               ( SRet(_2) )
# 893 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 122 "parser.mly"
           ( SRet(EEmpty) )
# 899 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 123 "parser.mly"
                  ( SBlock([]) )
# 905 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'stmts) in
    Obj.repr(
# 124 "parser.mly"
                        ( SBlock(_2) )
# 912 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 125 "parser.mly"
                              ( SIf(_3, _5, SEmpty) )
# 920 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'exp) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'stmt) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 126 "parser.mly"
                                        ( SIf(_3, _5, _7) )
# 929 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 127 "parser.mly"
                ( SLet(Ty _3, EVar _1, EEmpty) )
# 937 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 128 "parser.mly"
                            ( SLet(_3, EVar _1, _5) )
# 946 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'cases) in
    Obj.repr(
# 129 "parser.mly"
                                  ( SMatch(_1, _4) )
# 954 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'adef) in
    Obj.repr(
# 132 "parser.mly"
         ( [_1] )
# 961 "parser.ml"
               : 'defs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'adef) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'defs) in
    Obj.repr(
# 133 "parser.mly"
              ( _1 :: _2 )
# 969 "parser.ml"
               : 'defs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'adef) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'defs) in
    Obj.repr(
# 134 "parser.mly"
              ( _1 :: _2 )
# 977 "parser.ml"
               : 'defs))
; (fun __caml_parser_env ->
    Obj.repr(
# 137 "parser.mly"
        ( AStatic )
# 983 "parser.ml"
               : 'access))
; (fun __caml_parser_env ->
    Obj.repr(
# 138 "parser.mly"
         ( AStatic )
# 989 "parser.ml"
               : 'access))
; (fun __caml_parser_env ->
    Obj.repr(
# 139 "parser.mly"
        ( APublic )
# 995 "parser.ml"
               : 'access))
; (fun __caml_parser_env ->
    Obj.repr(
# 140 "parser.mly"
        ( APrivate )
# 1001 "parser.ml"
               : 'access))
; (fun __caml_parser_env ->
    Obj.repr(
# 141 "parser.mly"
          ( AProtected )
# 1007 "parser.ml"
               : 'access))
; (fun __caml_parser_env ->
    Obj.repr(
# 142 "parser.mly"
          ( AFinal )
# 1013 "parser.ml"
               : 'access))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'access) in
    Obj.repr(
# 145 "parser.mly"
           ( [_1] )
# 1020 "parser.ml"
               : 'accesses))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'access) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'accesses) in
    Obj.repr(
# 146 "parser.mly"
                    ( _1::_2 )
# 1028 "parser.ml"
               : 'accesses))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'accesses) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'def) in
    Obj.repr(
# 149 "parser.mly"
                 ( SAccess(_1, _2) )
# 1036 "parser.ml"
               : 'adef))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'def) in
    Obj.repr(
# 150 "parser.mly"
        ( _1 )
# 1043 "parser.ml"
               : 'adef))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'adef) in
    Obj.repr(
# 151 "parser.mly"
                   ( _1 )
# 1050 "parser.ml"
               : 'adef))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 153 "parser.mly"
            ( SPackage(_1) )
# 1057 "parser.ml"
               : 'def))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 155 "parser.mly"
                                                         (

      SFun(Ty _5, _1, [], addBlock _7)
    )
# 1069 "parser.ml"
               : 'def))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'prms) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 159 "parser.mly"
                                                              (

      SFun(Ty _6, _1, _3, addBlock _8)
    )
# 1082 "parser.ml"
               : 'def))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 163 "parser.mly"
                ( SLet(Ty _3, EVar _1, EEmpty) )
# 1090 "parser.ml"
               : 'def))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 164 "parser.mly"
                            ( SLet(_3, EVar _1, _5) )
# 1099 "parser.ml"
               : 'def))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'class_) in
    Obj.repr(
# 165 "parser.mly"
           ( _1 )
# 1106 "parser.ml"
               : 'def))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'trait_defs) in
    Obj.repr(
# 166 "parser.mly"
                                      ( STrait(_1, _4) )
# 1114 "parser.ml"
               : 'def))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 169 "parser.mly"
       ( (_1, "") )
# 1121 "parser.ml"
               : 'extends))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 170 "parser.mly"
                   ( (_3, _1) )
# 1129 "parser.ml"
               : 'extends))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 171 "parser.mly"
                   ( (_1, _3) )
# 1137 "parser.ml"
               : 'extends))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'extends) in
    Obj.repr(
# 173 "parser.mly"
                                ( SClass(fst _1, snd _1, []) )
# 1144 "parser.ml"
               : 'class_))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'extends) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'defs) in
    Obj.repr(
# 174 "parser.mly"
                                     ( SClass(fst _1, snd _1, _4) )
# 1152 "parser.ml"
               : 'class_))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'extends) in
    Obj.repr(
# 175 "parser.mly"
                                (
      SClass(fst _1, snd _1,[SCon(fst _1, [],SBlock [])])
    )
# 1161 "parser.ml"
               : 'class_))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'extends) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'prms) in
    Obj.repr(
# 179 "parser.mly"
                                     (
      let mems = List.map begin fun (ty, id) ->
        SLet(ty, EVar id, EEmpty)
      end _4 in
      let inits = List.map begin fun (ty, id) ->
        SExp(EBin(EBin(EVar "this", ".", EVar id), "=", EVar id))
      end _4 in
      SClass(fst _1, snd _1, SCon(fst _1, _4,SBlock inits)::mems)
    )
# 1177 "parser.ml"
               : 'class_))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'extends) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'prms) in
    Obj.repr(
# 189 "parser.mly"
                                                   (
      let mems = List.map begin fun (ty, id) ->
        SLet(ty, EVar id, EEmpty)
      end _4 in
      let inits = List.map begin fun (ty, id) ->
        SExp(EBin(EBin(EVar "this", ".", EVar id), "=", EVar id))
      end _4 in
      SClass(fst _1, snd _1, SCon(fst _1, _4, SBlock inits)::mems)
    )
# 1193 "parser.ml"
               : 'class_))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : 'extends) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'prms) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'defs) in
    Obj.repr(
# 199 "parser.mly"
                                                        (
      let mems = List.map begin fun (ty, id) ->
        SLet(ty, EVar id, EEmpty)
      end _4 in
      let inits = List.map begin fun (ty, id) ->
        SExp(EBin(EBin(EVar "this", ".", EVar id), "=", EVar id))
      end _4 in
      SClass(fst _1, snd _1, SCon(fst _1, _4, SBlock inits)::mems @ _7)
    )
# 1210 "parser.ml"
               : 'class_))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'trait_def) in
    Obj.repr(
# 211 "parser.mly"
              ( [_1] )
# 1217 "parser.ml"
               : 'trait_defs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'trait_def) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'trait_defs) in
    Obj.repr(
# 212 "parser.mly"
                         ( _1 :: _2 )
# 1225 "parser.ml"
               : 'trait_defs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 215 "parser.mly"
                              (
      SFun(Ty _5, _1, [], SEmpty)
    )
# 1235 "parser.ml"
               : 'trait_def))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'prms) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 218 "parser.mly"
                                   (
      SFun(Ty _6, _1, _3, SEmpty)
    )
# 1246 "parser.ml"
               : 'trait_def))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'prms_) in
    Obj.repr(
# 222 "parser.mly"
          (
    let(_,ls) = List.fold_left (fun (n,ls) m  ->
      match m with
      | (t,"") -> (n+1,(t,("_"^string_of_int n))::ls)
      | (t,id) -> (n+1,(t,id)::ls)
    ) (1, []) _1
    in List.rev ls
  )
# 1260 "parser.ml"
               : 'prms))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 232 "parser.mly"
                 ( [_3, _1] )
# 1268 "parser.ml"
               : 'prms_))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'prms_) in
    Obj.repr(
# 233 "parser.mly"
                             ( (_3, _1)::_5 )
# 1277 "parser.ml"
               : 'prms_))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 234 "parser.mly"
        ( [_1,""] )
# 1284 "parser.ml"
               : 'prms_))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'prms_) in
    Obj.repr(
# 235 "parser.mly"
                    ( (_1,"")::_3 )
# 1292 "parser.ml"
               : 'prms_))
(* Entry prog *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let prog (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.prog)
