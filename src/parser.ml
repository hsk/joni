type token =
  | PACKAGE of (string)
  | IMPORT of (string)
  | STRING of (string)
  | INT of (int)
  | ID of (string)
  | STATIC
  | PUBLIC
  | PRIVATE
  | PROTECTED
  | FINAL
  | CLASS
  | THIS
  | TRAIT
  | EXTENDS
  | REXTENDS
  | IF
  | ELSE
  | MATCH
  | OR
  | ARROW
  | RETURN
  | COLON
  | COMMA
  | SEMICOLON
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | LBRACK
  | RBRACK
  | HAT
  | SHARP
  | HART
  | ASSIGN
  | RASSIGN
  | CAST
  | EQ
  | NE
  | LT
  | GT
  | LE
  | GE
  | SUB
  | ADD
  | MUL
  | DIV
  | NEW
  | DOT
  | AT
  | EOF

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
open Ast

let addBlock = function
  | (SBlock _ as b) -> b
  | b -> SBlock [b]

# 63 "parser.ml"
let yytransl_const = [|
  262 (* STATIC *);
  263 (* PUBLIC *);
  264 (* PRIVATE *);
  265 (* PROTECTED *);
  266 (* FINAL *);
  267 (* CLASS *);
  268 (* THIS *);
  269 (* TRAIT *);
  270 (* EXTENDS *);
  271 (* REXTENDS *);
  272 (* IF *);
  273 (* ELSE *);
  274 (* MATCH *);
  275 (* OR *);
  276 (* ARROW *);
  277 (* RETURN *);
  278 (* COLON *);
  279 (* COMMA *);
  280 (* SEMICOLON *);
  281 (* LPAREN *);
  282 (* RPAREN *);
  283 (* LBRACE *);
  284 (* RBRACE *);
  285 (* LBRACK *);
  286 (* RBRACK *);
  287 (* HAT *);
  288 (* SHARP *);
  289 (* HART *);
  290 (* ASSIGN *);
  291 (* RASSIGN *);
  292 (* CAST *);
  293 (* EQ *);
  294 (* NE *);
  295 (* LT *);
  296 (* GT *);
  297 (* LE *);
  298 (* GE *);
  299 (* SUB *);
  300 (* ADD *);
  301 (* MUL *);
  302 (* DIV *);
  303 (* NEW *);
  304 (* DOT *);
  305 (* AT *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  257 (* PACKAGE *);
  258 (* IMPORT *);
  259 (* STRING *);
  260 (* INT *);
  261 (* ID *);
    0|]

let yylhs = "\255\255\
\001\000\003\000\003\000\004\000\004\000\005\000\005\000\005\000\
\005\000\007\000\007\000\008\000\008\000\006\000\006\000\006\000\
\006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
\006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
\006\000\006\000\009\000\009\000\010\000\010\000\011\000\012\000\
\012\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
\013\000\013\000\013\000\002\000\002\000\002\000\015\000\015\000\
\015\000\015\000\015\000\015\000\016\000\016\000\014\000\014\000\
\014\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
\021\000\021\000\021\000\019\000\019\000\019\000\019\000\019\000\
\019\000\020\000\020\000\022\000\022\000\018\000\023\000\023\000\
\023\000\023\000\000\000"

let yylen = "\002\000\
\001\000\001\000\004\000\001\000\003\000\003\000\001\000\001\000\
\001\000\001\000\003\000\001\000\002\000\001\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\002\000\002\000\002\000\003\000\003\000\
\004\000\005\000\001\000\003\000\001\000\002\000\004\000\001\000\
\002\000\001\000\002\000\001\000\002\000\003\000\005\000\007\000\
\003\000\005\000\005\000\001\000\002\000\002\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\002\000\002\000\001\000\
\002\000\001\000\007\000\008\000\003\000\005\000\001\000\005\000\
\001\000\003\000\003\000\004\000\005\000\004\000\005\000\007\000\
\008\000\001\000\002\000\005\000\006\000\001\000\003\000\005\000\
\001\000\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\066\000\000\000\060\000\055\000\059\000\056\000\
\058\000\057\000\091\000\001\000\000\000\000\000\000\000\064\000\
\071\000\000\000\000\000\000\000\000\000\000\000\000\000\065\000\
\053\000\062\000\063\000\000\000\000\000\074\000\075\000\000\000\
\000\000\000\000\000\000\000\000\000\000\086\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\078\000\000\000\076\000\000\000\000\000\072\000\083\000\
\000\000\000\000\008\000\007\000\000\000\000\000\000\000\000\000\
\000\000\000\000\014\000\000\000\000\000\000\000\000\000\090\000\
\000\000\000\000\077\000\000\000\000\000\003\000\000\000\000\000\
\000\000\000\000\029\000\028\000\030\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\032\000\000\000\000\000\006\000\000\000\031\000\017\000\
\018\000\019\000\020\000\021\000\022\000\024\000\023\000\025\000\
\026\000\027\000\000\000\088\000\000\000\000\000\000\000\000\000\
\000\000\067\000\000\000\080\000\000\000\084\000\000\000\000\000\
\000\000\033\000\000\000\000\000\000\000\045\000\000\000\000\000\
\000\000\068\000\081\000\085\000\011\000\034\000\000\000\000\000\
\000\000\046\000\041\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\051\000\038\000\000\000\000\000\
\048\000\039\000"

let yydgoto = "\002\000\
\011\000\012\000\036\000\000\000\067\000\082\000\108\000\069\000\
\000\000\160\000\161\000\143\000\144\000\013\000\014\000\015\000\
\016\000\037\000\017\000\042\000\018\000\043\000\038\000"

let yysindex = "\043\000\
\185\255\000\000\000\000\211\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\144\255\031\255\018\255\000\000\
\000\000\036\255\027\255\051\255\053\255\061\255\004\255\000\000\
\000\000\000\000\000\000\028\255\063\255\000\000\000\000\040\255\
\038\255\245\254\054\255\055\255\056\255\000\000\007\255\150\255\
\052\255\059\255\063\255\074\255\118\255\074\255\075\255\076\255\
\062\255\000\000\057\255\000\000\060\255\009\255\000\000\000\000\
\040\255\066\255\000\000\000\000\068\255\118\255\118\255\118\255\
\118\255\118\255\000\000\116\002\065\255\078\255\070\255\000\000\
\092\255\079\255\000\000\083\255\081\255\000\000\115\255\116\002\
\082\002\116\002\000\000\000\000\000\000\118\255\074\255\118\255\
\118\255\118\255\118\255\118\255\118\255\118\255\118\255\118\255\
\118\255\118\255\118\255\076\255\087\255\090\255\179\255\104\255\
\088\255\000\000\061\002\246\254\000\000\065\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\129\002\000\000\014\255\102\255\118\255\024\255\
\026\002\000\000\087\255\000\000\085\255\000\000\123\255\118\255\
\103\255\000\000\126\255\118\255\116\002\000\000\105\255\087\255\
\108\255\000\000\000\000\000\000\000\000\000\000\040\255\098\255\
\103\002\000\000\000\000\125\255\118\255\087\255\132\255\110\255\
\125\255\116\002\129\255\127\255\000\000\000\000\087\255\087\255\
\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\139\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\002\000\037\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\049\002\
\000\000\020\255\000\000\130\255\000\000\000\000\000\000\000\000\
\000\000\000\000\124\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\001\000\000\000\000\000\000\000\050\000\000\000\000\000\000\000\
\000\000\000\000\000\000\160\001\000\000\131\255\000\000\000\000\
\000\000\114\001\000\000\000\000\000\000\000\000\000\000\232\000\
\128\255\012\001\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\236\254\000\000\000\000\099\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\197\000\000\000\148\000\000\000\014\002\000\000\
\101\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\150\001\000\000\000\000\254\254\
\000\000\000\000\000\000\000\000\000\000\000\000\052\001\000\000\
\128\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\138\255\199\001\234\001\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000"

let yygindex = "\000\000\
\000\000\248\255\234\255\000\000\000\000\214\255\017\000\149\000\
\000\000\254\255\000\000\119\255\159\255\000\000\000\000\155\000\
\156\000\227\255\000\000\127\000\000\000\000\000\216\255"

let yytablesize = 945
let yytable = "\033\000\
\002\000\052\000\068\000\130\000\025\000\010\000\155\000\072\000\
\034\000\051\000\046\000\034\000\137\000\034\000\012\000\138\000\
\040\000\044\000\003\000\080\000\081\000\058\000\004\000\070\000\
\077\000\040\000\059\000\060\000\125\000\035\000\170\000\053\000\
\050\000\146\000\076\000\139\000\107\000\061\000\079\000\126\000\
\005\000\061\000\002\000\001\000\127\000\002\000\028\000\062\000\
\063\000\009\000\128\000\142\000\039\000\029\000\040\000\030\000\
\123\000\031\000\129\000\124\000\163\000\006\000\007\000\008\000\
\111\000\032\000\064\000\041\000\044\000\169\000\065\000\045\000\
\066\000\009\000\010\000\047\000\054\000\048\000\057\000\071\000\
\034\000\049\000\074\000\073\000\141\000\129\000\055\000\075\000\
\129\000\059\000\060\000\125\000\079\000\107\000\133\000\078\000\
\102\000\153\000\015\000\099\000\100\000\129\000\126\000\101\000\
\104\000\103\000\105\000\127\000\134\000\135\000\062\000\063\000\
\147\000\128\000\162\000\129\000\152\000\059\000\060\000\061\000\
\059\000\060\000\061\000\131\000\129\000\129\000\140\000\148\000\
\150\000\064\000\151\000\157\000\154\000\065\000\156\000\066\000\
\164\000\165\000\062\000\063\000\106\000\062\000\063\000\159\000\
\003\000\167\000\168\000\009\000\004\000\073\000\003\000\082\000\
\149\000\005\000\004\000\089\000\087\000\064\000\166\000\005\000\
\064\000\065\000\012\000\066\000\065\000\037\000\066\000\024\000\
\026\000\056\000\027\000\000\000\000\000\000\000\006\000\007\000\
\008\000\052\000\000\000\003\000\006\000\007\000\008\000\004\000\
\000\000\003\000\009\000\010\000\005\000\004\000\000\000\000\000\
\009\000\010\000\005\000\000\000\016\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\132\000\000\000\
\000\000\006\000\007\000\008\000\083\000\084\000\085\000\006\000\
\007\000\008\000\000\000\000\000\000\000\009\000\010\000\019\000\
\020\000\021\000\000\000\009\000\010\000\000\000\000\000\013\000\
\022\000\000\000\110\000\023\000\112\000\113\000\114\000\115\000\
\116\000\117\000\118\000\119\000\120\000\121\000\122\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\002\000\000\000\002\000\002\000\002\000\000\000\000\000\
\000\000\000\000\002\000\012\000\000\000\000\000\000\000\000\000\
\002\000\002\000\002\000\002\000\000\000\002\000\000\000\002\000\
\002\000\002\000\002\000\002\000\002\000\052\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\009\000\049\000\009\000\009\000\009\000\000\000\
\000\000\000\000\000\000\009\000\000\000\000\000\000\000\000\000\
\000\000\009\000\009\000\009\000\009\000\000\000\009\000\000\000\
\009\000\009\000\000\000\009\000\009\000\009\000\000\000\000\000\
\009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
\009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
\009\000\009\000\009\000\015\000\042\000\015\000\015\000\015\000\
\000\000\000\000\000\000\000\000\015\000\000\000\000\000\000\000\
\000\000\079\000\015\000\015\000\015\000\015\000\000\000\015\000\
\000\000\015\000\015\000\015\000\015\000\015\000\015\000\000\000\
\000\000\015\000\015\000\015\000\015\000\000\000\015\000\015\000\
\015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
\015\000\015\000\015\000\015\000\009\000\043\000\009\000\009\000\
\009\000\000\000\000\000\000\000\000\000\009\000\000\000\070\000\
\000\000\000\000\000\000\009\000\009\000\009\000\009\000\000\000\
\009\000\000\000\000\000\009\000\000\000\000\000\009\000\009\000\
\000\000\000\000\009\000\009\000\009\000\009\000\009\000\009\000\
\009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
\009\000\009\000\009\000\009\000\009\000\016\000\050\000\016\000\
\016\000\016\000\000\000\000\000\000\000\000\000\016\000\000\000\
\000\000\000\000\000\000\000\000\016\000\016\000\016\000\016\000\
\000\000\016\000\000\000\016\000\016\000\016\000\016\000\016\000\
\016\000\000\000\000\000\016\000\016\000\016\000\016\000\012\000\
\013\000\047\000\013\000\013\000\013\000\000\000\000\000\000\000\
\000\000\013\000\000\000\016\000\000\000\016\000\000\000\013\000\
\013\000\013\000\013\000\000\000\013\000\000\000\013\000\013\000\
\013\000\013\000\013\000\013\000\000\000\000\000\013\000\013\000\
\013\000\000\000\012\000\000\000\012\000\044\000\012\000\012\000\
\012\000\000\000\000\000\000\000\000\000\012\000\013\000\000\000\
\013\000\000\000\000\000\012\000\012\000\012\000\012\000\000\000\
\012\000\000\000\012\000\012\000\012\000\012\000\012\000\012\000\
\000\000\000\000\012\000\012\000\012\000\000\000\012\000\000\000\
\069\000\000\000\000\000\000\000\049\000\000\000\049\000\049\000\
\049\000\000\000\012\000\000\000\012\000\049\000\000\000\000\000\
\000\000\000\000\000\000\049\000\049\000\000\000\049\000\000\000\
\049\000\000\000\000\000\049\000\049\000\000\000\049\000\049\000\
\000\000\000\000\049\000\049\000\049\000\002\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\049\000\049\000\
\000\000\000\000\049\000\000\000\049\000\042\000\000\000\042\000\
\042\000\042\000\000\000\000\000\000\000\000\000\042\000\000\000\
\000\000\000\000\079\000\000\000\042\000\042\000\079\000\042\000\
\000\000\042\000\000\000\079\000\042\000\042\000\000\000\042\000\
\042\000\000\000\000\000\042\000\042\000\042\000\000\000\012\000\
\000\000\079\000\000\000\000\000\000\000\079\000\000\000\000\000\
\079\000\079\000\079\000\042\000\000\000\042\000\043\000\000\000\
\043\000\043\000\043\000\000\000\079\000\079\000\000\000\043\000\
\070\000\000\000\000\000\000\000\070\000\043\000\043\000\000\000\
\043\000\070\000\043\000\000\000\000\000\043\000\043\000\000\000\
\043\000\043\000\000\000\000\000\043\000\043\000\043\000\070\000\
\012\000\000\000\000\000\070\000\000\000\000\000\070\000\070\000\
\070\000\000\000\012\000\000\000\043\000\000\000\043\000\050\000\
\000\000\050\000\050\000\050\000\000\000\000\000\000\000\000\000\
\050\000\000\000\000\000\000\000\000\000\000\000\050\000\050\000\
\000\000\050\000\000\000\050\000\000\000\000\000\050\000\050\000\
\000\000\050\000\050\000\000\000\000\000\050\000\050\000\050\000\
\000\000\012\000\047\000\000\000\047\000\047\000\047\000\000\000\
\000\000\000\000\000\000\047\000\000\000\050\000\000\000\050\000\
\000\000\047\000\000\000\000\000\047\000\000\000\047\000\000\000\
\000\000\047\000\047\000\000\000\047\000\047\000\000\000\000\000\
\047\000\047\000\047\000\000\000\000\000\000\000\044\000\000\000\
\000\000\000\000\000\000\000\000\047\000\047\000\000\000\044\000\
\047\000\000\000\047\000\000\000\000\000\044\000\044\000\000\000\
\044\000\000\000\044\000\000\000\000\000\000\000\000\000\000\000\
\044\000\044\000\000\000\145\000\044\000\044\000\044\000\000\000\
\000\000\069\000\000\000\000\000\000\000\069\000\000\000\000\000\
\000\000\044\000\069\000\086\000\000\000\087\000\088\000\089\000\
\090\000\091\000\092\000\093\000\094\000\095\000\096\000\097\000\
\069\000\098\000\000\000\000\000\069\000\000\000\000\000\069\000\
\069\000\069\000\002\000\136\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\069\000\069\000\000\000\086\000\000\000\
\087\000\088\000\089\000\090\000\091\000\092\000\093\000\094\000\
\095\000\096\000\097\000\109\000\098\000\000\000\000\000\000\000\
\000\000\000\000\000\000\086\000\000\000\087\000\088\000\089\000\
\090\000\091\000\092\000\093\000\094\000\095\000\096\000\097\000\
\158\000\098\000\000\000\000\000\000\000\000\000\000\000\000\000\
\086\000\000\000\087\000\088\000\089\000\090\000\091\000\092\000\
\093\000\094\000\095\000\096\000\097\000\086\000\098\000\087\000\
\088\000\089\000\090\000\091\000\092\000\093\000\094\000\095\000\
\096\000\097\000\000\000\098\000\087\000\088\000\089\000\090\000\
\091\000\092\000\093\000\094\000\095\000\096\000\097\000\000\000\
\098\000"

let yycheck = "\022\000\
\000\000\000\000\045\000\101\000\013\000\026\001\144\000\048\000\
\005\001\039\000\022\001\005\001\023\001\005\001\035\001\026\001\
\019\001\029\001\001\001\062\000\063\000\044\000\005\001\046\000\
\054\000\028\001\003\001\004\001\005\001\026\001\168\000\040\000\
\026\001\131\000\026\001\022\001\079\000\001\001\025\001\016\001\
\010\001\005\001\023\001\001\000\021\001\026\001\011\001\024\001\
\025\001\000\000\027\001\028\001\025\001\027\001\027\001\005\001\
\099\000\005\001\101\000\100\000\158\000\031\001\032\001\033\001\
\087\000\005\001\043\001\005\001\029\001\167\000\047\001\034\001\
\049\001\043\001\044\001\022\001\025\001\023\001\005\001\005\001\
\005\001\026\001\026\001\022\001\127\000\128\000\028\001\028\001\
\131\000\003\001\004\001\005\001\025\001\136\000\103\000\030\001\
\005\001\140\000\000\000\035\001\023\001\144\000\016\001\034\001\
\022\001\027\001\026\001\021\001\005\001\022\001\024\001\025\001\
\028\001\027\001\157\000\158\000\139\000\003\001\004\001\005\001\
\003\001\004\001\005\001\034\001\167\000\168\000\025\001\005\001\
\026\001\043\001\005\001\034\001\028\001\047\001\027\001\049\001\
\005\001\028\001\024\001\025\001\026\001\024\001\025\001\019\001\
\001\001\017\001\020\001\000\000\005\001\011\001\001\001\028\001\
\136\000\010\001\005\001\026\001\026\001\043\001\161\000\010\001\
\043\001\047\001\035\001\049\001\047\001\028\001\049\001\024\001\
\014\000\043\000\015\000\255\255\255\255\255\255\031\001\032\001\
\033\001\028\001\255\255\001\001\031\001\032\001\033\001\005\001\
\255\255\001\001\043\001\044\001\010\001\005\001\255\255\255\255\
\043\001\044\001\010\001\255\255\000\000\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\028\001\255\255\
\255\255\031\001\032\001\033\001\064\000\065\000\066\000\031\001\
\032\001\033\001\255\255\255\255\255\255\043\001\044\001\013\001\
\014\001\015\001\255\255\043\001\044\001\255\255\255\255\000\000\
\022\001\255\255\086\000\025\001\088\000\089\000\090\000\091\000\
\092\000\093\000\094\000\095\000\096\000\097\000\098\000\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\001\001\255\255\003\001\004\001\005\001\255\255\255\255\
\255\255\255\255\010\001\000\000\255\255\255\255\255\255\255\255\
\016\001\017\001\018\001\019\001\255\255\021\001\255\255\023\001\
\024\001\025\001\026\001\027\001\028\001\028\001\030\001\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\043\001\044\001\045\001\046\001\047\001\
\048\001\049\001\001\001\000\000\003\001\004\001\005\001\255\255\
\255\255\255\255\255\255\010\001\255\255\255\255\255\255\255\255\
\255\255\016\001\017\001\018\001\019\001\255\255\021\001\255\255\
\023\001\024\001\255\255\026\001\027\001\028\001\255\255\255\255\
\031\001\032\001\033\001\034\001\035\001\036\001\037\001\038\001\
\039\001\040\001\041\001\042\001\043\001\044\001\045\001\046\001\
\047\001\048\001\049\001\001\001\000\000\003\001\004\001\005\001\
\255\255\255\255\255\255\255\255\010\001\255\255\255\255\255\255\
\255\255\000\000\016\001\017\001\018\001\019\001\255\255\021\001\
\255\255\023\001\024\001\025\001\026\001\027\001\028\001\255\255\
\255\255\031\001\032\001\033\001\034\001\255\255\036\001\037\001\
\038\001\039\001\040\001\041\001\042\001\043\001\044\001\045\001\
\046\001\047\001\048\001\049\001\001\001\000\000\003\001\004\001\
\005\001\255\255\255\255\255\255\255\255\010\001\255\255\000\000\
\255\255\255\255\255\255\016\001\017\001\018\001\019\001\255\255\
\021\001\255\255\255\255\024\001\255\255\255\255\027\001\028\001\
\255\255\255\255\031\001\032\001\033\001\034\001\035\001\036\001\
\037\001\038\001\039\001\040\001\041\001\042\001\043\001\044\001\
\045\001\046\001\047\001\048\001\049\001\001\001\000\000\003\001\
\004\001\005\001\255\255\255\255\255\255\255\255\010\001\255\255\
\255\255\255\255\255\255\255\255\016\001\017\001\018\001\019\001\
\255\255\021\001\255\255\023\001\024\001\025\001\026\001\027\001\
\028\001\255\255\255\255\031\001\032\001\033\001\034\001\035\001\
\001\001\000\000\003\001\004\001\005\001\255\255\255\255\255\255\
\255\255\010\001\255\255\047\001\255\255\049\001\255\255\016\001\
\017\001\018\001\019\001\255\255\021\001\255\255\023\001\024\001\
\025\001\026\001\027\001\028\001\255\255\255\255\031\001\032\001\
\033\001\255\255\035\001\255\255\001\001\000\000\003\001\004\001\
\005\001\255\255\255\255\255\255\255\255\010\001\047\001\255\255\
\049\001\255\255\255\255\016\001\017\001\018\001\019\001\255\255\
\021\001\255\255\023\001\024\001\025\001\026\001\027\001\028\001\
\255\255\255\255\031\001\032\001\033\001\255\255\035\001\255\255\
\000\000\255\255\255\255\255\255\001\001\255\255\003\001\004\001\
\005\001\255\255\047\001\255\255\049\001\010\001\255\255\255\255\
\255\255\255\255\255\255\016\001\017\001\255\255\019\001\255\255\
\021\001\255\255\255\255\024\001\025\001\255\255\027\001\028\001\
\255\255\255\255\031\001\032\001\033\001\034\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\043\001\044\001\
\255\255\255\255\047\001\255\255\049\001\001\001\255\255\003\001\
\004\001\005\001\255\255\255\255\255\255\255\255\010\001\255\255\
\255\255\255\255\001\001\255\255\016\001\017\001\005\001\019\001\
\255\255\021\001\255\255\010\001\024\001\025\001\255\255\027\001\
\028\001\255\255\255\255\031\001\032\001\033\001\255\255\035\001\
\255\255\024\001\255\255\255\255\255\255\028\001\255\255\255\255\
\031\001\032\001\033\001\047\001\255\255\049\001\001\001\255\255\
\003\001\004\001\005\001\255\255\043\001\044\001\255\255\010\001\
\001\001\255\255\255\255\255\255\005\001\016\001\017\001\255\255\
\019\001\010\001\021\001\255\255\255\255\024\001\025\001\255\255\
\027\001\028\001\255\255\255\255\031\001\032\001\033\001\024\001\
\035\001\255\255\255\255\028\001\255\255\255\255\031\001\032\001\
\033\001\255\255\035\001\255\255\047\001\255\255\049\001\001\001\
\255\255\003\001\004\001\005\001\255\255\255\255\255\255\255\255\
\010\001\255\255\255\255\255\255\255\255\255\255\016\001\017\001\
\255\255\019\001\255\255\021\001\255\255\255\255\024\001\025\001\
\255\255\027\001\028\001\255\255\255\255\031\001\032\001\033\001\
\255\255\035\001\001\001\255\255\003\001\004\001\005\001\255\255\
\255\255\255\255\255\255\010\001\255\255\047\001\255\255\049\001\
\255\255\016\001\255\255\255\255\019\001\255\255\021\001\255\255\
\255\255\024\001\025\001\255\255\027\001\028\001\255\255\255\255\
\031\001\032\001\033\001\255\255\255\255\255\255\001\001\255\255\
\255\255\255\255\255\255\255\255\043\001\044\001\255\255\010\001\
\047\001\255\255\049\001\255\255\255\255\016\001\017\001\255\255\
\019\001\255\255\021\001\255\255\255\255\255\255\255\255\255\255\
\027\001\028\001\255\255\018\001\031\001\032\001\033\001\255\255\
\255\255\001\001\255\255\255\255\255\255\005\001\255\255\255\255\
\255\255\044\001\010\001\034\001\255\255\036\001\037\001\038\001\
\039\001\040\001\041\001\042\001\043\001\044\001\045\001\046\001\
\024\001\048\001\255\255\255\255\028\001\255\255\255\255\031\001\
\032\001\033\001\034\001\023\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\043\001\044\001\255\255\034\001\255\255\
\036\001\037\001\038\001\039\001\040\001\041\001\042\001\043\001\
\044\001\045\001\046\001\026\001\048\001\255\255\255\255\255\255\
\255\255\255\255\255\255\034\001\255\255\036\001\037\001\038\001\
\039\001\040\001\041\001\042\001\043\001\044\001\045\001\046\001\
\026\001\048\001\255\255\255\255\255\255\255\255\255\255\255\255\
\034\001\255\255\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\034\001\048\001\036\001\
\037\001\038\001\039\001\040\001\041\001\042\001\043\001\044\001\
\045\001\046\001\255\255\048\001\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\043\001\044\001\045\001\046\001\255\255\
\048\001"

let yynames_const = "\
  STATIC\000\
  PUBLIC\000\
  PRIVATE\000\
  PROTECTED\000\
  FINAL\000\
  CLASS\000\
  THIS\000\
  TRAIT\000\
  EXTENDS\000\
  REXTENDS\000\
  IF\000\
  ELSE\000\
  MATCH\000\
  OR\000\
  ARROW\000\
  RETURN\000\
  COLON\000\
  COMMA\000\
  SEMICOLON\000\
  LPAREN\000\
  RPAREN\000\
  LBRACE\000\
  RBRACE\000\
  LBRACK\000\
  RBRACK\000\
  HAT\000\
  SHARP\000\
  HART\000\
  ASSIGN\000\
  RASSIGN\000\
  CAST\000\
  EQ\000\
  NE\000\
  LT\000\
  GT\000\
  LE\000\
  GE\000\
  SUB\000\
  ADD\000\
  MUL\000\
  DIV\000\
  NEW\000\
  DOT\000\
  AT\000\
  EOF\000\
  "

let yynames_block = "\
  PACKAGE\000\
  IMPORT\000\
  STRING\000\
  INT\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'defs) in
    Obj.repr(
# 57 "parser.mly"
         ( Prog(_1) )
# 536 "parser.ml"
               : Ast.prog))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 60 "parser.mly"
       ( Ty _1 )
# 543 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    Obj.repr(
# 61 "parser.mly"
                                       ( TGen(_1, _3) )
# 551 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 64 "parser.mly"
        ( [_1] )
# 558 "parser.ml"
               : 'typs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typs) in
    Obj.repr(
# 65 "parser.mly"
                   ( _1 :: _3 )
# 566 "parser.ml"
               : 'typs))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 68 "parser.mly"
                      ( _2 )
# 573 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 69 "parser.mly"
        ( EInt(_1) )
# 580 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 70 "parser.mly"
           ( EString(_1) )
# 587 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 71 "parser.mly"
       ( EVar(_1) )
# 594 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 74 "parser.mly"
        ( [_1] )
# 601 "parser.ml"
               : 'exps))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exps) in
    Obj.repr(
# 75 "parser.mly"
                   ( _1 :: _3 )
# 609 "parser.ml"
               : 'exps))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 78 "parser.mly"
        ( _1 )
# 616 "parser.ml"
               : 'exp2))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 79 "parser.mly"
                  ( _2 )
# 623 "parser.ml"
               : 'exp2))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 82 "parser.mly"
               ( _1 )
# 630 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp2) in
    Obj.repr(
# 83 "parser.mly"
                    ( EBin(_1, "=", _3) )
# 638 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp2) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 84 "parser.mly"
                     ( EBin(_3, "=", _1) )
# 646 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp2) in
    Obj.repr(
# 86 "parser.mly"
                ( EBin(_1, "==", _3) )
# 654 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp2) in
    Obj.repr(
# 87 "parser.mly"
                ( EBin(_1, "!=", _3) )
# 662 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp2) in
    Obj.repr(
# 89 "parser.mly"
                ( EBin(_1, "<", _3) )
# 670 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp2) in
    Obj.repr(
# 90 "parser.mly"
                ( EBin(_1, ">", _3) )
# 678 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp2) in
    Obj.repr(
# 91 "parser.mly"
                ( EBin(_1, "<=", _3) )
# 686 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp2) in
    Obj.repr(
# 92 "parser.mly"
                ( EBin(_1, ">=", _3) )
# 694 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp2) in
    Obj.repr(
# 94 "parser.mly"
                 ( EBin(_1, "+", _3) )
# 702 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp2) in
    Obj.repr(
# 95 "parser.mly"
                 ( EBin(_1, "-", _3) )
# 710 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp2) in
    Obj.repr(
# 97 "parser.mly"
                 ( EBin(_1, "*", _3) )
# 718 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp2) in
    Obj.repr(
# 98 "parser.mly"
                 ( EBin(_1, "/", _3) )
# 726 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp2) in
    Obj.repr(
# 100 "parser.mly"
                 ( EBin(_1, ".", _3) )
# 734 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'exp2) in
    Obj.repr(
# 102 "parser.mly"
             ( EPre("new", _2) )
# 741 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'exp2) in
    Obj.repr(
# 103 "parser.mly"
                       ( EPre("-", _2))
# 748 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'exp2) in
    Obj.repr(
# 105 "parser.mly"
            ( EBin(EVar("this"), ".", _2) )
# 755 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 106 "parser.mly"
                 ( ECast(_3, _1) )
# 763 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    Obj.repr(
# 107 "parser.mly"
                     ( ECall(EVar(_1), []) )
# 770 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'exps) in
    Obj.repr(
# 108 "parser.mly"
                          ( ECall(EVar(_1), _3) )
# 778 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'exps) in
    Obj.repr(
# 109 "parser.mly"
                                ( ECall(EVar(_1), _3) )
# 786 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 112 "parser.mly"
       ( [_1] )
# 793 "parser.ml"
               : 'ids))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'ids) in
    Obj.repr(
# 113 "parser.mly"
                 ( _1::_3 )
# 801 "parser.ml"
               : 'ids))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'case) in
    Obj.repr(
# 116 "parser.mly"
         ( [_1] )
# 808 "parser.ml"
               : 'cases))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'case) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'cases) in
    Obj.repr(
# 117 "parser.mly"
               ( _1::_2 )
# 816 "parser.ml"
               : 'cases))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'stmts) in
    Obj.repr(
# 119 "parser.mly"
                      ( (_2, _4) )
# 824 "parser.ml"
               : 'case))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 122 "parser.mly"
         ( [_1] )
# 831 "parser.ml"
               : 'stmts))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmts) in
    Obj.repr(
# 123 "parser.mly"
               ( _1 :: _2 )
# 839 "parser.ml"
               : 'stmts))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 126 "parser.mly"
        ( SExp(_1) )
# 846 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 127 "parser.mly"
               ( SRet(_2) )
# 853 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 128 "parser.mly"
           ( SRet(EEmpty) )
# 859 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 129 "parser.mly"
                  ( SBlock([]) )
# 865 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'stmts) in
    Obj.repr(
# 130 "parser.mly"
                        ( SBlock(_2) )
# 872 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 131 "parser.mly"
                              ( SIf(_3, _5, SEmpty) )
# 880 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'exp) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'stmt) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 132 "parser.mly"
                                        ( SIf(_3, _5, _7) )
# 889 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 133 "parser.mly"
                ( SLet(Ty _3, EVar _1, EEmpty) )
# 897 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 134 "parser.mly"
                            ( SLet(_3, EVar _1, _5) )
# 906 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'cases) in
    Obj.repr(
# 135 "parser.mly"
                                  ( SMatch(_1, _4) )
# 914 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'adef) in
    Obj.repr(
# 138 "parser.mly"
         ( [_1] )
# 921 "parser.ml"
               : 'defs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'adef) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'defs) in
    Obj.repr(
# 139 "parser.mly"
              ( _1 :: _2 )
# 929 "parser.ml"
               : 'defs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'adef) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'defs) in
    Obj.repr(
# 140 "parser.mly"
              ( _1 :: _2 )
# 937 "parser.ml"
               : 'defs))
; (fun __caml_parser_env ->
    Obj.repr(
# 143 "parser.mly"
        ( AStatic )
# 943 "parser.ml"
               : 'access))
; (fun __caml_parser_env ->
    Obj.repr(
# 144 "parser.mly"
         ( AStatic )
# 949 "parser.ml"
               : 'access))
; (fun __caml_parser_env ->
    Obj.repr(
# 145 "parser.mly"
        ( APublic )
# 955 "parser.ml"
               : 'access))
; (fun __caml_parser_env ->
    Obj.repr(
# 146 "parser.mly"
        ( APrivate )
# 961 "parser.ml"
               : 'access))
; (fun __caml_parser_env ->
    Obj.repr(
# 147 "parser.mly"
          ( AProtected )
# 967 "parser.ml"
               : 'access))
; (fun __caml_parser_env ->
    Obj.repr(
# 148 "parser.mly"
          ( AFinal )
# 973 "parser.ml"
               : 'access))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'access) in
    Obj.repr(
# 151 "parser.mly"
           ( [_1] )
# 980 "parser.ml"
               : 'accesses))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'access) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'accesses) in
    Obj.repr(
# 152 "parser.mly"
                    ( _1::_2 )
# 988 "parser.ml"
               : 'accesses))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'accesses) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'def) in
    Obj.repr(
# 155 "parser.mly"
                 ( SAccess(_1, _2) )
# 996 "parser.ml"
               : 'adef))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'def) in
    Obj.repr(
# 156 "parser.mly"
        ( _1 )
# 1003 "parser.ml"
               : 'adef))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'adef) in
    Obj.repr(
# 157 "parser.mly"
                   ( _1 )
# 1010 "parser.ml"
               : 'adef))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 159 "parser.mly"
            ( SPackage(_1) )
# 1017 "parser.ml"
               : 'def))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 161 "parser.mly"
                                                         (

      SFun(Ty _5, _1, [], addBlock _7)
    )
# 1029 "parser.ml"
               : 'def))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'prms) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 165 "parser.mly"
                                                              (

      SFun(Ty _6, _1, _3, addBlock _8)
    )
# 1042 "parser.ml"
               : 'def))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 169 "parser.mly"
                ( SLet(Ty _3, EVar _1, EEmpty) )
# 1050 "parser.ml"
               : 'def))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 170 "parser.mly"
                            ( SLet(_3, EVar _1, _5) )
# 1059 "parser.ml"
               : 'def))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'class_) in
    Obj.repr(
# 171 "parser.mly"
           ( _1 )
# 1066 "parser.ml"
               : 'def))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'trait_defs) in
    Obj.repr(
# 172 "parser.mly"
                                      ( STrait(_1, _4) )
# 1074 "parser.ml"
               : 'def))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 175 "parser.mly"
       ( (_1, "") )
# 1081 "parser.ml"
               : 'extends))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 176 "parser.mly"
                   ( (_3, _1) )
# 1089 "parser.ml"
               : 'extends))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 177 "parser.mly"
                   ( (_1, _3) )
# 1097 "parser.ml"
               : 'extends))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'extends) in
    Obj.repr(
# 179 "parser.mly"
                                ( SClass(fst _1, snd _1, []) )
# 1104 "parser.ml"
               : 'class_))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'extends) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'defs) in
    Obj.repr(
# 180 "parser.mly"
                                     ( SClass(fst _1, snd _1, _4) )
# 1112 "parser.ml"
               : 'class_))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'extends) in
    Obj.repr(
# 181 "parser.mly"
                                (
      SClass(fst _1, snd _1,[SCon(fst _1, [],SBlock [])])
    )
# 1121 "parser.ml"
               : 'class_))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'extends) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'prms) in
    Obj.repr(
# 185 "parser.mly"
                                     (
      let mems = List.map begin fun (ty, id) ->
        SLet(ty, EVar id, EEmpty)
      end _4 in
      let inits = List.map begin fun (ty, id) ->
        SExp(EBin(EBin(EVar "this", ".", EVar id), "=", EVar id))
      end _4 in
      SClass(fst _1, snd _1, SCon(fst _1, _4,SBlock inits)::mems)
    )
# 1137 "parser.ml"
               : 'class_))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'extends) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'prms) in
    Obj.repr(
# 195 "parser.mly"
                                                   (
      let mems = List.map begin fun (ty, id) ->
        SLet(ty, EVar id, EEmpty)
      end _4 in
      let inits = List.map begin fun (ty, id) ->
        SExp(EBin(EBin(EVar "this", ".", EVar id), "=", EVar id))
      end _4 in
      SClass(fst _1, snd _1, SCon(fst _1, _4, SBlock inits)::mems)
    )
# 1153 "parser.ml"
               : 'class_))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : 'extends) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'prms) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'defs) in
    Obj.repr(
# 205 "parser.mly"
                                                        (
      let mems = List.map begin fun (ty, id) ->
        SLet(ty, EVar id, EEmpty)
      end _4 in
      let inits = List.map begin fun (ty, id) ->
        SExp(EBin(EBin(EVar "this", ".", EVar id), "=", EVar id))
      end _4 in
      SClass(fst _1, snd _1, SCon(fst _1, _4, SBlock inits)::mems @ _7)
    )
# 1170 "parser.ml"
               : 'class_))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'trait_def) in
    Obj.repr(
# 217 "parser.mly"
              ( [_1] )
# 1177 "parser.ml"
               : 'trait_defs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'trait_def) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'trait_defs) in
    Obj.repr(
# 218 "parser.mly"
                         ( _1 :: _2 )
# 1185 "parser.ml"
               : 'trait_defs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 221 "parser.mly"
                              (
      SFun(Ty _5, _1, [], SEmpty)
    )
# 1195 "parser.ml"
               : 'trait_def))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'prms) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 224 "parser.mly"
                                   (
      SFun(Ty _6, _1, _3, SEmpty)
    )
# 1206 "parser.ml"
               : 'trait_def))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'prms_) in
    Obj.repr(
# 228 "parser.mly"
          (
    let(_,ls) = List.fold_left (fun (n,ls) m  ->
      match m with
      | (t,"") -> (n+1,(t,("_"^string_of_int n))::ls)
      | (t,id) -> (n+1,(t,id)::ls)
    ) (1, []) _1
    in List.rev ls
  )
# 1220 "parser.ml"
               : 'prms))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 238 "parser.mly"
                 ( [_3, _1] )
# 1228 "parser.ml"
               : 'prms_))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'prms_) in
    Obj.repr(
# 239 "parser.mly"
                             ( (_3, _1)::_5 )
# 1237 "parser.ml"
               : 'prms_))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 240 "parser.mly"
        ( [_1,""] )
# 1244 "parser.ml"
               : 'prms_))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'prms_) in
    Obj.repr(
# 241 "parser.mly"
                    ( (_1,"")::_3 )
# 1252 "parser.ml"
               : 'prms_))
(* Entry prog *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let prog (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.prog)
